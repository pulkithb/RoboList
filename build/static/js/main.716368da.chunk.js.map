{"version":3,"sources":["Card.js","Cardlist.js","Searchbox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","Cardlist","Roboname","cardComponent","map","user","i","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.716368da.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = (props) => {\r\n    const {id, name, email}= props;\r\n    //var addr=\"https://robohash.org/\" + id;\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robo' src={'https://robohash.org/'+id} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst Cardlist = ({Roboname}) => {\r\n    const cardComponent = Roboname.map((user,i) => {\r\n        return <Card id={Roboname[i].id} name={Roboname[i].name} email={Roboname[i].email} />\r\n    })\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\nexport default Cardlist;","import React from 'react';\r\nconst Searchbox = ({searchfield,searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className='pa3 ba b--green bg-lightest-blue' type ='search' placeholder=\"Search Robot\" onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height:'550px'}}>\r\n            {props.children}\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport Searchbox from './Searchbox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      Roboname: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n      return response.json();\r\n    }).then(users=>{\r\n      this.setState({Roboname:users})\r\n    })\r\n    \r\n  }\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n  render(){\r\n    const filteredRobots = this.state.Roboname.filter(Roboname =>{\r\n      return Roboname.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    }) \r\n    if(this.state.Roboname.length===0)\r\n        {\r\n          return <h1>Loading...</h1>\r\n        }\r\n    else{\r\n    return (\r\n      \r\n      <div className='tc'>\r\n        <h1 className=\"f1\">RoboFriend</h1>\r\n        <Searchbox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <Cardlist Roboname={filteredRobots}/>\r\n        </Scroll>\r\n      </div>\r\n      \r\n    );\r\n    }\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <App />\n   // <Hello />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}